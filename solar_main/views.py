import os
import random
from django.conf import settings
from django.shortcuts import render
from django.views.decorators.csrf import csrf_exempt
from django.http import JsonResponse
import requests
import time
from django.utils.timezone import now
from datetime import timedelta

def index(request):
    media_path = os.path.join(settings.MEDIA_ROOT, 'products')
    image_files = []

    if os.path.exists(media_path):
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_files = [f"{settings.MEDIA_URL}products/{f}" for f in os.listdir(media_path) if f.endswith(('.jpg', '.png', '.jpeg', '.webp'))]

    return render(request, 'solar_main/index.html', {'file_urls': image_files})

TELEGRAM_BOT_TOKEN = '7890565191:AAGwTmdkxe-nCuOpNCAMu5YKVUjKDxl6vOQ'
TELEGRAM_CHAT_ID = '-1002515072654'

@csrf_exempt
def form_page(request):
    cooldown_key = 'last_form_submit'
    cooldown_time = 3600  # 1 —á–∞—Å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    if request.method == 'POST':
        last_submit = request.session.get(cooldown_key)
        current_time = int(time.time())

        if last_submit and current_time - last_submit < cooldown_time:
            wait_min = int((cooldown_time - (current_time - last_submit)) / 60)
            message = f"–í–∏ –≤–∂–µ –Ω–∞–¥—Å–∏–ª–∞–ª–∏ —Ñ–æ—Ä–º—É –Ω–µ—â–æ–¥–∞–≤–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É —á–µ—Ä–µ–∑ {wait_min} —Ö–≤–∏–ª–∏–Ω."
            return render(request, 'solar_main/form.html', {"message": message, "blocked": True})

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
        request.session[cooldown_key] = current_time

        full_name = request.POST.get('full_name', '')
        phone = '+380' + request.POST.get('phone_number', '')
        city = request.POST.get('city', '')
        description = request.POST.get('user_request', '')

        message_text = (
            f"üì• –ù–æ–≤–∏–π –∑–∞–ø–∏—Ç –∑ —Ñ–æ—Ä–º–∏:\n\n"
            f"üë§ –Ü–º‚Äô—è: {full_name}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"üèôÔ∏è –ú—ñ—Å—Ç–æ: {city}\n"
            f"üìù –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {description}"
        )

        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {'chat_id': TELEGRAM_CHAT_ID, 'text': message_text}

        try:
            response = requests.post(url, data=payload)
            if response.status_code == 200:
                message = "–§–æ—Ä–º–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ, –º–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º."
            else:
                message = "–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ Telegram. –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –±—É–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ."
        except Exception:
            message = "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –≤ Telegram."

        return render(request, 'solar_main/form.html', {"message": message})

    return render(request, 'solar_main/form.html')

def products_page(request):
    products = [
        {
            "title": "HS435TC-MHO-D",
            "price": 60.00,
            "power": "435 W",
            "size": "1722√ó1134√ó30 mm",
            "weight": "24 kg"
        },
        {
            "title": "HS450TC-MHC-D",
            "price": 64.00,
            "power": "450 W",
            "size": "1762√ó1134√ó30 mm",
            "weight": "24.5 kg"
        },
        {
            "title": "HS580TC-MHO-D",
            "price": 78.00,
            "power": "580 W",
            "size": "2279√ó1134√ó30 mm",
            "weight": "31.5 kg"
        },
        {
            "title": "HS620TC-MHC-D",
            "price": 83.00,
            "power": "620 W",
            "size": "2382√ó1134√ó30 mm",
            "weight": "33.7 kg"
        }
    ]
    return render(request, 'solar_main/products.html', {'products': products})